<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">
    <!-- log 변수 값 설정 -->
    <properties>
        <property name="LOG_PREFIX">${spring:spring.application.name}</property>
        <property name="LOG_PATH">${spring:logging.path}</property>
        <property name="LOG_LEVEL">${spring:logging.logLevel}</property>
        <property name="LOG_FILE_NAME">${spring:logging.filename}</property>
        <property name="LOG_MAX_HISTORY">${spring:logging.maxHistory}</property>
        <property name="LOG_SIZE_CAP">${spring:logging.sizeCap}</property>
        <property name="LOG_INTERVAL_CAP">${spring:logging.intervalCap}</property>
        <property name="KAFKA_BOOTSTRAP_SERVERS">${spring:logging.kafka.bootstrapServers}</property>
        <property name="KAFKA_TOPIC_QUERY_LOG">${spring:logging.kafka.topic.queryLog}</property>
        <property name="DEFAULT_PATTERN"
                  value="[${LOG_PREFIX}] %d{yyyy-MM-dd HH:mm:ss} [%thread] [%-5level] %logger{36} - %msg%n" />
        <property name="COLOR_PATTERN"
                  value="[${LOG_PREFIX}] %d{yyyy-MM-dd HH:mm:ss} [%thread] [%highlight{%-5level}] %logger{36} - %msg%n" />
        <property name="KAFKA_USER_QUERY_LOG_PATTERN"
                  value="%msg%n" />
    </properties>

    <!-- Appender 설정 -->
    <Appenders>
        <!-- Console log Appender -->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout charset="UTF-8" pattern="${COLOR_PATTERN}" />
        </Console>

        <!-- Rolling File Appender -->
        <RollingFile name ="File">
            <FileName>${LOG_PATH}/${LOG_FILE_NAME}.log</FileName>
            <FilePattern>${LOG_PATH}/archive/${LOG_FILE_NAME}.%d{yyyy-MM-dd-hh-mm}.log</FilePattern>
            <PatternLayout charset="UTF-8" pattern="${DEFAULT_PATTERN}" />
            <Policies>
                <SizeBasedTriggeringPolicy size="${LOG_SIZE_CAP}"/>
                <TimeBasedTriggeringPolicy interval="${LOG_INTERVAL_CAP}" modulate="true" />
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${LOG_PATH}/archive" maxDepth="1">
                    <IfAccumulatedFileCount exceeds="${LOG_MAX_HISTORY}"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- Kafka Appender -->
        <Kafka name="Kafka" topic="${KAFKA_TOPIC_QUERY_LOG}" syncSend="false">
            <PatternLayout charset="UTF-8" pattern="${KAFKA_USER_QUERY_LOG_PATTERN}"/>
            <Filters>
                <!-- Deny Log Level -->
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="FATAL" onMatch="DENY" onMismatch="NEUTRAL"/>
                <!-- Accept Log Level -->
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <Property name="bootstrap.servers">${KAFKA_BOOTSTRAP_SERVERS}</Property>
        </Kafka>

        <!-- Async Kafka Appender -->
        <Async name="AsyncKafka">
            <AppenderRef ref="Kafka"/>
        </Async>
    </Appenders>

    <!-- Logger 설정 -->
    <Loggers>
        <Logger name="org.springframework" level="${LOG_LEVEL}" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="org.apache.ibatis" level="${LOG_LEVEL}" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="org.thymeleaf" level="${LOG_LEVEL}" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="org.apache" level="INFO" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <!-- http 통신 과정에서 주고 받는 데이터를 확인 하기 위해서는 해당 설정을 Debug로 설정. -->
        <Logger name="org.apache.http.wire" level="INFO" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="com.amazonaws.util" level="${LOG_LEVEL}" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="elasticsearch" level="${LOG_LEVEL}" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="org.mongodb.driver" level="${LOG_LEVEL}" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="org.apache.kafka" level="${LOG_LEVEL}" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="org.springframework.kafka" level="${LOG_LEVEL}" additivity="false" >
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
        <Logger name="elasticsearch.config.aspect.UserQueryLogAspect" level="INFO" additivity="false" >
            <!--appenderRef ref="Console"/-->
            <AppenderRef ref="AsyncKafka"/>
            <AppenderRef ref="Console">
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            </AppenderRef>
        </Logger>

        <!-- Log4jdbc 옵션 설정 -->
        <Logger name="jdbc" level="OFF"/>
        <!-- SQL문 만을 로그로 남긴다, PreparedStatement일 경우 관련된 argument 값으로 대체된 값으로 SQL 문이 보여진다. -->
        <Logger name="jdbc.sqlonly" level="OFF"/>
        <!-- SQL문과 해당 SQL을 싱행시키는데 수행된 시간정보(millseconds)를 포함한다 -->
        <Logger name="jdbc.sqltiming" level="${LOG_LEVEL}"/>
        <!-- ResultSet 을 제외한 모든 JDBC 호출 정보를 로그로 남김, 방대한 양의 로그가 쌓임
             JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고 사용을 권장하지 않음 -->
        <Logger name="jdbc.audit" level="OFF"/>
        <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그에 남김, 방대한 양의 로그가 쌓임 -->
        <Logger name="jdbc.resultset" level="OFF"/>
        <!-- SQL 조회된 데이터를 TABLE 로그로 남긴다. -->
        <Logger name="jdbc.resultsettable" level="${LOG_LEVEL}"/>
        <!-- 커넥션 open, close 이벤트 로그를 남긴다. -->
        <Logger name="jdbc.connection" level="${LOG_LEVEL}"/>

        <!-- Root : 일반적인 로그 정책(필수) -->
        <Root level="${LOG_LEVEL}" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Root>
    </Loggers>
</configuration>